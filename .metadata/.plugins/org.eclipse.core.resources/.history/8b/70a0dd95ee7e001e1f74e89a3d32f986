package com.sonata.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sonata.dto.ProductDesDto;
import com.sonata.dto.ProductListDto;
import com.sonata.model.Product;
import com.sonata.service.ProductService;


@RestController
@RequestMapping("product")
public class ProductController {
	
	@Autowired
	private ProductService productservice;

	private final Logger logger = LoggerFactory.getLogger(ProductController.class);

	
	@GetMapping("/findAll")
	public List<Product> getAll(Product products) {
		logger.info("Fetching all products");
		return productservice.getAllUser();
	}
	
	
	@PostMapping("/addProduct")
	 public ResponseEntity<Product> createUser(@RequestBody Product product) {
	    Product savedproduct = productservice.save(product);
	     return ResponseEntity.status(HttpStatus.CREATED).body(savedproduct);
	    }
	
	
	
	@GetMapping("/product-details/{pId}")
	public ProductDesDto getProductDetalis(@PathVariable int pId){
		return productservice.getAllProductDetails().stream().filter(i->i.getpId()==pId).findFirst().get();
	}
	
	
	
	@GetMapping("/list-details")
	public List<ProductListDto> getProducListtDetalis(){
		return productservice.getListDetails(brandName);
	
	}
	
		@GetMapping("/productCountPerBrand")
		public Map<String, Integer> getProductCountPerBrand() {
			List<Product> products = productservice.getProducts();
			return productservice.getProductCountPerBrand(products);
		}
	
		
	@GetMapping("/brand/{bname}")
		public List<Product> getProductsByBrandName(@PathVariable String bname) {
			logger.info("fetching the product with name:{}", bname);

			List<Product> product = productservice.getProducts();
			if (product == null) {
				logger.warn("No product was found for this brand:{}", bname);
				return (List<Product>) ResponseEntity.notFound().build();
			}
			logger.info("Found product with bname: {}", bname);
			return productservice.getProductsByBrand(product, bname);
		}
	
	

	   
	
	

}
