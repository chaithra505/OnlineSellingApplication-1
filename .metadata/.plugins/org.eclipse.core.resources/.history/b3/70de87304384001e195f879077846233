package com.sonata.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sonata.dto.Product;
import com.sonata.dto.ShoppingCartRequest;
import com.sonata.dto.ShoppingCartResponce;
import com.sonata.dto.UserDto;
import com.sonata.model.Cart;
import com.sonata.repo.CartRepo;

import jakarta.ws.rs.NotFoundException;

@Service
public class CartService {

    @Autowired
    private CartRepo cartRepo;

    @Autowired
    private RestTemplate restTemplate;

    public ShoppingCartResponce processAddRequest(int userId, List<ShoppingCartRequest> shoppingCartRequestList) {
        // Call user-service to fetch user details
        UserDto userDto = fetchUserDetails(userId);

        // Call product-service to fetch product details
        List<Product> productServiceList = fetchProductDetails(shoppingCartRequestList);

        // Calculate total cost
        double totalCost = calculateTotalCost(productServiceList, shoppingCartRequestList);

        // Create CartEntity
        Cart cartEntity = new Cart();
        cartEntity.setUser_id(userId);
        cartEntity.setCartId((int) (Math.random() * Math.pow(10, 10)));
        cartEntity.setTotalItems(productServiceList.size());
        cartEntity.setTotalCost(totalCost);
        try {
            cartEntity.setProduct(new ObjectMapper().writeValueAsString(productServiceList));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }

        // Save CartEntity
        cartEntity = cartRepo.save(cartEntity);

        // Create API response
        ShoppingCartResponce response = new ShoppingCartResponce();
        response.setCartId(cartEntity.getCartId());
        response.setTotalItems(cartEntity.getTotalItems());
        response.setTotalCost(cartEntity.getTotalCost());
        response.setProducts(productServiceList);
        response.setUser(userDto);

        return response;
    }

    private UserDto fetchUserDetails(int userId) {
        return restTemplate.getForObject("http://localhost:8081/user/dto/{uId}", UserDto.class, userId);
    }

    private List<Product> fetchProductDetails(List<ShoppingCartRequest> shoppingCartRequestList) {
        String productIds = shoppingCartRequestList.stream()
                .map(request -> String.valueOf(request.getpId()))
                .collect(Collectors.joining(","));
        String productServiceUrl = "http://product-service/products/getProducts/" + productIds;
        return restTemplate.getForObject(productServiceUrl, List.class);
    }

    private double calculateTotalCost(List<Product> productServiceList, List<ShoppingCartRequest> shoppingCartRequestList) {
        double totalCost = 0.0;
        for (Product product : productServiceList) {
            for (ShoppingCartRequest request : shoppingCartRequestList) {
                if (product.getpId() == request.getpId()) {
                    product.setQuantity(request.getQuantity());
                    totalCost += product.getPrice() * request.getQuantity();
                }
            }
        }
        return totalCost;
    }
}

	
	
}