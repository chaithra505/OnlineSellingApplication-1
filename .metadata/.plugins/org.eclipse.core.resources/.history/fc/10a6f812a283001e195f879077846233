package com.sonata.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.sonata.dto.ShoppingCartRequest;
import com.sonata.dto.ShoppingCartResponce;
import com.sonata.exception.ProductNotFoundException;
import com.sonata.exception.UserNotFoundException;
import com.sonata.model.Cart;
import com.sonata.model.Product;
import com.sonata.model.UserDto;
import com.sonata.service.CartService;

@RestController
@RequestMapping("cart")
public class CartController {
	
	 @Autowired
	 private RestTemplate restTemplate;
	
	@Autowired
     private CartService cartService;
	
//	@PostMapping("{userId/products}")
//		public ResponseEntity addProductToCart(
//				@PathVariable Long userId,
//				@RequestBody List<ShoppingCartRequest> reqProductList )
//	{
//			
//	  ShoppingCartResponce response = cartService.processAddRequest(userId,reqProductList);
//	  return new ResponseEntity(response,HttpStatus.CREATED)
//	}
//		
	
	   @PostMapping("/addProduct")
	    public ResponseEntity<ShoppingCartResponce> addProductToCart(
	            @RequestParam int userId,
	            @RequestParam int productId,
	            @RequestParam int quantity) {
	        try {
	            UserDto userDto = new UserDto();
	            userDto.setUserId(userId);

	            ShoppingCartResponce response = cartService.addProductToCart(userDto, productId, quantity);
	            return ResponseEntity.ok(response);
	        } catch (UserNotFoundException | ProductNotFoundException ex) {
	            // Handle exceptions appropriately, you might want to return a specific error response
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	        }
	    }
	
	

	
	

}
