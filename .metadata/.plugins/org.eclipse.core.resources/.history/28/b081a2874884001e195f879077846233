package com.sonata.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sonata.dto.Product;
import com.sonata.dto.ShoppingCartRequest;
import com.sonata.dto.ShoppingCartResponce;
import com.sonata.dto.UserDto;
import com.sonata.model.Cart;
import com.sonata.repo.CartRepo;

@Service
public class CartService {

    @Autowired
    private CartRepo cartRepo;

    @Autowired
    private RestTemplate restTemplate;

    public ShoppingCartResponce processAddRequest(int userId, List<ShoppingCartRequest> shoppingCartRequestList) {
        
        UserDto userDto = fetchUserDetails("http://user-service/users/{userId}");
        
        // Call product-service to fetch product details
        List<Product> productServiceList = fetchProductDetails(shoppingCartRequestList);

        // Calculate total cost
        final Double[] totalCost = {0.0};
        productServiceList.forEach(psl -> {
            shoppingCartRequestList.forEach(scr -> {
                if (psl.getpId() == scr.getpId()) {
                    psl.setQuantity(scr.getQuantity());
                    totalCost[0] = totalCost[0] + psl.getPrice() * scr.getQuantity();
                }
            });
        });

        // Create CartEntity
        CartEntity cartEntity = new CartEntity();
        cartEntity.setUserId(userId);
        cartEntity.setCartId((long) (Math.random() * Math.pow(10, 10)));
        cartEntity.setTotalItems(productServiceList.size());
        cartEntity.setTotalCost(totalCost[0]);
        try {
            cartEntity.setProducts(new ObjectMapper().writeValueAsString(productServiceList));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }

        // Save CartEntity
        cartEntity = cartRepo.save(cartEntity);

        // Create API response
        ShoppingCartResponse response = new ShoppingCartResponse();
        response.setCartId(cartEntity.getCartId());
        response.setUserId(cartEntity.getUserId());
        response.setTotalItems(cartEntity.getTotalItems());
        response.setTotalCost(cartEntity.getTotalCost());
        response.setProducts(productServiceList);
        response.setUser(userDto);

        return response;
    }

    private UserDto fetchUserDetails(String userServiceUrl) {
        return webBuilder.build()
                .get()
                .uri(userServiceUrl, userId)
                .retrieve()
                .bodyToMono(UserDto.class)
                .block();
    }

    private List<Product> fetchProductDetails(List<ShoppingCartRequest> shoppingCartRequestList) {
        String productServiceUrl = "http://product-service/products/getProducts/" + shoppingCartRequestList.stream().map(e -> String.valueOf(e.getpId())).collect(Collectors.joining(","));
        return webBuilder.build()
                .get()
                .uri(productServiceUrl)
                .retrieve()
                .bodyToFlux(Product.class)
                .collectList()
                .block();
    }

	
}